{"version":3,"sources":["component/TodoTemplate.js","component/TodoInsert.js","component/TodoListItem.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","children","className","onInsert","useState","value","setValue","onSubmit","useCallback","e","preventDefault","onChange","target","placeholder","todo","onRemove","onToggle","id","title","checked","cn","onClick","todos","map","key","createBulk","arr","a","push","todoReducer","action","type","concat","newTodo","filter","App","useReducer","undefined","dispatch","nextId","useRef","description","current","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e81f3861.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoTemplate.scss';\n\nconst TodoTemplate = ({ children }) => {\n    // console.log(children)\n    return (\n        <div className='TodoTemplate'>\n            <div className='title'>\n                Swiming Todo\n             </div>\n            <div className='content'>\n                {children}\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(TodoTemplate);","import React, { useState, useCallback } from 'react';\nimport './TodoInsert.scss';\nimport { FaAngleDown } from \"react-icons/fa\";\n\nconst TodoInsert = ( { onInsert } ) => {\n    const [ value, setValue ] = useState('');\n\n    const onSubmit = useCallback( ( e ) => {\n        onInsert( value );\n        setValue( '' );\n        e.preventDefault();\n    }, [ value ])\n\n    const onChange = useCallback((e) => {\n        setValue(e.target.value);\n    }, [ value ] );\n\n    return (\n        <form className='TodoInsert' onSubmit={ onSubmit }>\n            <input value={value} placeholder='Enter Todos...' onChange={onChange}/>\n            <button >\n                <FaAngleDown />\n            </button>\n        </form>\n    )\n}\n\nexport default React.memo( TodoInsert );","import React from 'react';\nimport './TodoListItem.scss';\nimport cn from 'classnames';\nimport { FaRegCircle, FaRegCheckCircle, FaRegTimesCircle } from 'react-icons/fa';\n\nconst TodoListItem = ({ todo, onRemove, onToggle }) => {\n    const { id, title, checked } = todo;\n    return (\n        <div className='TodoListItem'>\n            <div className='flex-display'>\n                <div className={cn('checkbox', { checked } )} onClick={ () => onToggle(id) }>\n                    { checked ? <FaRegCheckCircle />:<FaRegCircle /> }\n                </div>\n                <div className={cn('description', { checked } )}>\n                    {title}\n                </div>\n            </div>\n            <div className='remove' onClick={ () => onRemove(id) }>\n                <FaRegTimesCircle />\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(TodoListItem);","import React from 'react';\nimport TodoListItem from './TodoListItem';\nimport './TodoList.scss';\n\nconst TodoList = ({ todos, onRemove, onToggle }) => {\n    return (\n        <div className='TodoList'>\n            {todos.map( todo => {\n                return <TodoListItem todo={todo} onRemove={onRemove} onToggle={onToggle} key={todo.id}></TodoListItem>\n            })}\n         </div>\n    )\n}\n\nexport default React.memo(TodoList);","import React, { useCallback, useRef, useReducer } from 'react';\nimport TodoTemplate from './component/TodoTemplate';\nimport TodoInsert from './component/TodoInsert';\nimport TodoList from './component/TodoList';\n\nconst CONTENT_NUMBER = 5;\n\nconst createBulk = ( ) => {\n  const arr = [];\n  for( let a = 0; a < CONTENT_NUMBER; a++){\n     arr.push({\n       id: a,\n       title: `${a} th Content ( Example )`,\n       checked: a%2 === 0 ? false:true\n     })\n  }\n  return arr;\n}\n\nconst todoReducer = ( todos, action ) => {\n  switch ( action.type ) {\n    case 'INSERT':\n      return todos.concat( action.newTodo )\n    case 'REMOVE':\n      return todos.filter( todo => todo.id !== action.id )\n    case 'TOGGLE':\n      return todos.map( todo => todo.id !== action.id ? todo:{ ...todo, checked: !todo.checked} )\n    default:\n      break;\n  }\n}\n\nconst App = () => {\n  const [ todos, dispatch ] = useReducer( todoReducer, undefined, createBulk );\n  const nextId = useRef( CONTENT_NUMBER );\n\n  const onRemove = useCallback( id => {\n    dispatch({ type: 'REMOVE', id })\n    // setTodos( todos => todos.filter( todo => todo.id !== id ) )\n  }, [ ])\n\n  const onInsert = useCallback( description => {\n    const newTodo = {\n      id: nextId.current,\n      title: description,\n      checked: false\n    }\n    dispatch( { type: 'INSERT', newTodo } )\n    // setTodos( todos => todos.concat( newTodo ) );\n    nextId.current += 1;\n  }, [ ] )\n\n  const onToggle = useCallback( id => {\n    dispatch( { type: 'TOGGLE', id } )\n    // setTodos( todos => todos.map( todo => todo.id !== id ? todo: { ...todo, checked:!todo.checked } ) )\n  }, [ ] )\n\n  console.log( todos.map( todo => todo.id ) );\n  \n  return (\n    <div className='App'>\n      <TodoTemplate>\n        <TodoInsert onInsert={onInsert} />\n        <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n      </TodoTemplate>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}